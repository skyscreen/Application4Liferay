/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lenovo.bp.search.portlet.model.impl;

import com.lenovo.bp.search.portlet.model.Search;
import com.lenovo.bp.search.portlet.model.SearchModel;
import com.lenovo.bp.search.portlet.model.SearchSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Search service. Represents a row in the &quot;journalarticl_operator&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lenovo.bp.search.portlet.model.SearchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SearchImpl}.
 * </p>
 *
 * @author siyan
 * @see SearchImpl
 * @see com.lenovo.bp.search.portlet.model.Search
 * @see com.lenovo.bp.search.portlet.model.SearchModel
 * @generated
 */
@JSON(strict = true)
public class SearchModelImpl extends BaseModelImpl<Search>
	implements SearchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a search model instance should use the {@link com.lenovo.bp.search.portlet.model.Search} interface instead.
	 */
	public static final String TABLE_NAME = "journalarticl_operator";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "journalarticl_id", Types.BIGINT },
			{ "operat_type", Types.BIGINT },
			{ "operat_time", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "structureId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table journalarticl_operator (id_ LONG not null primary key,journalarticl_id LONG,operat_type LONG,operat_time DATE null,userId LONG,structureId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table journalarticl_operator";
	public static final String ORDER_BY_JPQL = " ORDER BY search.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY journalarticl_operator.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lenovo.bp.search.portlet.model.Search"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lenovo.bp.search.portlet.model.Search"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lenovo.bp.search.portlet.model.Search"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Search toModel(SearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Search model = new SearchImpl();

		model.setId(soapModel.getId());
		model.setJournalarticl_id(soapModel.getJournalarticl_id());
		model.setOperat_type(soapModel.getOperat_type());
		model.setOperat_time(soapModel.getOperat_time());
		model.setUserId(soapModel.getUserId());
		model.setStructureId(soapModel.getStructureId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Search> toModels(SearchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Search> models = new ArrayList<Search>(soapModels.length);

		for (SearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lenovo.bp.search.portlet.model.Search"));

	public SearchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Search.class;
	}

	@Override
	public String getModelClassName() {
		return Search.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("journalarticl_id", getJournalarticl_id());
		attributes.put("operat_type", getOperat_type());
		attributes.put("operat_time", getOperat_time());
		attributes.put("userId", getUserId());
		attributes.put("structureId", getStructureId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long journalarticl_id = (Long)attributes.get("journalarticl_id");

		if (journalarticl_id != null) {
			setJournalarticl_id(journalarticl_id);
		}

		Long operat_type = (Long)attributes.get("operat_type");

		if (operat_type != null) {
			setOperat_type(operat_type);
		}

		Date operat_time = (Date)attributes.get("operat_time");

		if (operat_time != null) {
			setOperat_time(operat_time);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String structureId = (String)attributes.get("structureId");

		if (structureId != null) {
			setStructureId(structureId);
		}
	}

	
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getJournalarticl_id() {
		return _journalarticl_id;
	}

	@Override
	public void setJournalarticl_id(long journalarticl_id) {
		_journalarticl_id = journalarticl_id;
	}

	
	@Override
	public long getOperat_type() {
		return _operat_type;
	}

	@Override
	public void setOperat_type(long operat_type) {
		_operat_type = operat_type;
	}

	
	@Override
	public Date getOperat_time() {
		return _operat_time;
	}

	@Override
	public void setOperat_time(Date operat_time) {
		_operat_time = operat_time;
	}

	
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	
	@Override
	public String getStructureId() {
		if (_structureId == null) {
			return StringPool.BLANK;
		}
		else {
			return _structureId;
		}
	}

	@Override
	public void setStructureId(String structureId) {
		_structureId = structureId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Search.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Search toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Search)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SearchImpl searchImpl = new SearchImpl();

		searchImpl.setId(getId());
		searchImpl.setJournalarticl_id(getJournalarticl_id());
		searchImpl.setOperat_type(getOperat_type());
		searchImpl.setOperat_time(getOperat_time());
		searchImpl.setUserId(getUserId());
		searchImpl.setStructureId(getStructureId());

		searchImpl.resetOriginalValues();

		return searchImpl;
	}

	@Override
	public int compareTo(Search search) {
		long primaryKey = search.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Search)) {
			return false;
		}

		Search search = (Search)obj;

		long primaryKey = search.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SearchModelImpl searchModelImpl = this;

		searchModelImpl._originalUserId = searchModelImpl._userId;

		searchModelImpl._setOriginalUserId = false;

		searchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Search> toCacheModel() {
		SearchCacheModel searchCacheModel = new SearchCacheModel();

		searchCacheModel.id = getId();

		searchCacheModel.journalarticl_id = getJournalarticl_id();

		searchCacheModel.operat_type = getOperat_type();

		Date operat_time = getOperat_time();

		if (operat_time != null) {
			searchCacheModel.operat_time = operat_time.getTime();
		}
		else {
			searchCacheModel.operat_time = Long.MIN_VALUE;
		}

		searchCacheModel.userId = getUserId();

		searchCacheModel.structureId = getStructureId();

		String structureId = searchCacheModel.structureId;

		if ((structureId != null) && (structureId.length() == 0)) {
			searchCacheModel.structureId = null;
		}

		return searchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", journalarticl_id=");
		sb.append(getJournalarticl_id());
		sb.append(", operat_type=");
		sb.append(getOperat_type());
		sb.append(", operat_time=");
		sb.append(getOperat_time());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", structureId=");
		sb.append(getStructureId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.lenovo.bp.search.portlet.model.Search");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalarticl_id</column-name><column-value><![CDATA[");
		sb.append(getJournalarticl_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operat_type</column-name><column-value><![CDATA[");
		sb.append(getOperat_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operat_time</column-name><column-value><![CDATA[");
		sb.append(getOperat_time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>structureId</column-name><column-value><![CDATA[");
		sb.append(getStructureId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Search.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Search.class };
	private long _id;
	private long _journalarticl_id;
	private long _operat_type;
	private Date _operat_time;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _structureId;
	private long _columnBitmask;
	private Search _escapedModel;
}